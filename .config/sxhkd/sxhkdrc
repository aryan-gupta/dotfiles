#
# wm independent hotkeys
#

# terminal emulator
super + Return
	alacritty

# program launcher
super + @space
	rofi -show drun -theme launcher -kb-cancel "super+space,Escape"

# power menu
super + e
	~/.config/rofi/power.sh -kb-cancel "super+e,Escape"

# power menu
super + q
	~/.config/rofi/sound.sh -kb-cancel "super+e,Escape"

# flameshot
{shift +,_}Print
	flameshot {full -c -p ~/Pictures,gui} && bspc node -f pointed.local

XF86AudioRaiseVolume
	pactl set-sink-volume @DEFAULT_SINK@ +10%

XF86AudioLowerVolume
	pactl set-sink-volume @DEFAULT_SINK@ -10%

XF86AudioMute
	pactl set-sink-mute @DEFAULT_SINK@ toggle

XF86AudioMicMute
	pactl set-source-mute @DEFAULT_SOURCE@ toggle

alt + space
	mpc toggle

super + button4
	pactl set-sink-volume @DEFAULT_SINK@ +2%

super + button5
	pactl set-sink-volume @DEFAULT_SINK@ -2%

super + button2
 	pactl set-sink-mute @DEFAULT_SINK@ toggle

#
# ======================  Applications ========================
# These will need to be remapped when new keyboard comes in
#

# browser
alt + {c,i}
	$BROWSER {-new-window,-private-window} &

# vs-code
alt + x
	code -n

# terminal
alt + t
	~/.config/bspwm/open_terminal_here

# file browser
alt + f
	thunar

# private browsing
# alt + p
# 	/opt/piavpn/bin/pia-client & ;\
# 	$VPNBROWSER &

# work vm
alt + w
	virt-manager --connect qemu:///system --show-domain-console win10-work-vm

#
# bspwm hotkeys
#




# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
	bspc node -s biggest



#
# focus/swap
#





# focus the next/previous node in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local



# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on











#
# preselect / move
# super + ctrl
#

# preselect the split direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}


# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

super + ctrl + Return
	bspc node -s 'last.local'

super + ctrl + i
	bspc node -i

#
# move/resize
#

# expand a window by moving one of its side outward
# super + alt + {h,j,k,l}
# 	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
# super + alt + shift + {h,j,k,l}
# 	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
# super + {Left,Down,Up,Right}
# 	bspc node -v {-20 0,0 20,0 -20,20 0}




























#
# ========================= WM =============================
#
# restart bspwm
super + Escape
	bspc wm -r

#
# ============================ Nodes ============================
#

# ==== manage
# close and kill windows
super + {_,shift + }w
	bspc node -{c,k}

# create and remove recepticles
super + {_,shift + }r
    insert={true,false}; \
    $insert && bspc node -i || \
    for win in `bspc query -N -n any.leaf.!window`; do bspc node $win -k ; done;

# ==== states / flags
# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

# ==== focus / move
# focus / swap the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {_,shift + }{p,b,comma,period}
	bspc node -{f,s} @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }Tab
	bspc node -f {next,prev}.local

# send focused to the given desktop. If it is the last node
# on the desktop then follow the focus to that desktop
super + shift + {0-9,minus,equal}
	target='{0-9,A,B}'; \
	[[ "$(bspc query -N -n .local.window | wc -l)" == "1" ]] \
	&& bspc node -d "$target" --follow || bspc node -d "$target"

# move the last focused window to preselected location
# if current node is preselected (bspc query -N -n '.local.!automatic') then move
# marked node there. If there is no marked node then move the last selected node
# if the current node is not preselected, mode the current node to the preselected
# location
# if the focused node is preselected, focus the last marked node or the last fcused node
# move the focused node to the preselected node
super + ctrl + semicolon
	if [ -z "$(bspc query -N -n focused.automatic)" ]; then \
		[ -z "$(bspc query -N -n .local.marked)"] && \
			bspc node -f "last.local" || \
			bspc node -f "last.local.marked"; \
	fi ; \
	bspc node -n 'last.!automatic.local'

# cancel the preselection for the last preselected
# if current selected node is preselected then cacel it
# otherwise focus the last preselected node and cancel that
super + ctrl + space
	if [ -z "$(bspc query -N -n focused.automatic)" ]; then \
		bspc node -p cancel ; \
	else \
		bspc node -f "last.local.!automatic" ; \
		bspc node -p cancel ; \
		bspc node -f "last.local" ; \
	fi

# preselect the ratio
# if the node is preselected then preselect the
# ratio. If its not preselected change the ratio
# to the given percentage
super + ctrl + {1-9}
	ratio="0.{1-9}"; \
	[ -z "$(bspc query -N -n focused.automatic)" ] && \
	bspc node -o "$ratio" || \
	bspc node @parent -r "$ratio"

#
# ========================== Desktops =============================
#

# focus new clean desktop
super + n
	bspc desktop -f next.!occupied.local

# focus the selected desktop. If if we are already on that
# desktop, focus the last occupied desktop
super + {0-9,minus,equal}
	target='{0-9,A,B}'; \
	[ "$(bspc query -D -d "$target")" != "$(bspc query -D -d)" ] \
	&& bspc desktop -f "$target" || bspc desktop -f last.local.occupied

# focus the next / prev occupied desktop
super + {_,shift + }grave
	bspc desktop -f {next,prev}.local.occupied

# swaps desktops in a given direction
super + alt + {h,l}
	swp="$(bspc query -D --names -d {prev,next}.local)"; \
	foc="$(bspc query -D --names -d focused.local)"; \
	bspc desktop "$swp" -s "$foc"; \
	bspc desktop "$swp" -n "t"; \
	bspc desktop "$foc" -n "$swp"; \
	bspc desktop    "t" -n "$foc";

# removes all empty workspaces in between occupied workspaces
# EX. 1 2 ○ 4 ○ 5 6 ○ 8
#      will become
#     1 2 3 4 5 6 ○ ○ ○
super + backslash
	c=1; \
	bspc query -D --names -d .occupied | while read d; do \
		bspc desktop "$d" -s "$c"; \
		bspc desktop "$d" -n "t"; \
		bspc desktop "$c" -n "$d"; \
		bspc desktop  "t" -n "$c"; \
		((c++)); \
	done;
